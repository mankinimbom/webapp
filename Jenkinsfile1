pipeline {
    agent any
    stages{
        stage('GitCheckOut'){
            steps{
                script{
                    try{
                        git branch: 'main', url: 'https://github.com/mankinimbom/webapp.git'
                    } catch(Exception e1) {
                        mail bcc: '', body: 'Jenkins was unable to download the code from the GitHub repository', cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git CSM Checkout Faild', to: 'ankinimbommichaely@gmail.com'
                        error("Git clone failed")
                    }
                }
            }
        }
        stage('Build'){
            steps{
                script{
                    try{
                        sh 'mvn package'
                    } catch(Exception e2) {
                        mail bcc: '', body: 'Maven was unable to build the project ', cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git CSM Checkout Faild', to: 'ankinimbommichaely@gmail.com'
                        error("Maven build failed")
                    }
                }
            }
        }
        stage('SonarCodeReview'){
            steps{
                script{
                    try{
                        withSonarQubeEnv(credentialsId: 'sonaqube') {
                            sh 'mvn sonar:sonar'
                        }
                    } mail bcc: '', body: 'sonrcod analysis faild ', cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git CSM Checkout Faild', to: 'ankinimbommichaely@gmail.com'
                        error("sonar analysis failed") 
                    }
                }
            }
        }
        stage{
            steps{
                script{
                    try{
                        sh 'mvn test'
                    } catch(Exception e3) {
                        mail bcc: '', body: 'Maven was unable to build the project ', cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git CSM Checkout Faild', to: 'ankinimbommichaely@gmail.com'
                        error("Testing failed")
                    }
                }
            }
        }
        stage('nexusArtifacupload') {
            steps{
                script{
                    try{
                        nexusArtifactUploader(
                        artifacts: [
                            [
                                artifactId: 'webapp', 
                                classifier: '', 
                                file: '/var/lib/jenkins/workspace/project/webapp/target/webapp.war', 
                                type: 'war'
                            ]
                        ], 
                        credentialsId: 'nexus', 
                        groupId: 'webapp', 
                        nexusUrl: 'nexuserver.atparadigmlabs.com', 
                        nexusVersion: 'nexus3', 
                        protocol: 'https', 
                        repository: 'maven-snapshots', 
                        version: '1.0-SNAPSHOT'
                    )
                    } catch("Exception e4") {
                        mail bcc: '', body: 'Maven was unable to build the project ', cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git CSM Checkout Faild', to: 'ankinimbommichaely@gmail.com'
                        error("Artifact Upload faild")
                    }
                }
            }
        }
    }
}


pipeline {
  agent {
    node { 
      label 'slave'
    } 
  }
  stages {
    stage('ContinuesDownloadCodeFromGitHubRepo') {
      steps {
        script{
          try {
            git 'https://github.com/mankinimbom/webapp.git'
          } catch(Exception e1) {
            emailext body: 'Jenkins was unable to download the code from the GitHub repository', to: 'ankinimbommichaely@gmail.com', subject: 'Code Download failed'
            error("Git clone failed")
          }
        }
      }
    }
    stage('ContinueBuild') {
      steps {
        script{
          try {
            sh 'mvn package'
          } catch(Exception e2) {
            emailext body: 'Jenkins was unable to build the code', to: 'ankinimbommichaely@gmail.com', subject: 'Code Build failed'
            error("Maven build failed")
          }
        }
      }
    }
    stage('SonarQube Analysis') {
      steps {
        script{
          try {
            // We've defined a SonarQube scanner in Jenkins Global Tools Configuration, and it's called "Default SonarQube Scanner"
            withSonarQubeEnv(credentialsId: 'sonarSonar') {
              sh 'mvn clean verify sonar:sonar'
            }
          } catch(Exception e) {
            emailext body: 'SonarQube analysis failed', to: 'ankinimbommichaely@gmail.com', subject: 'SonarQube Analysis failed'
            error("SonarQube Analysis failed")
          }
        }
      }
    }
    stage('CopyArtifactToTestServer') {
      steps {
        script{
          try {
            deploy adapters: [tomcat9(credentialsId: 'fe5d098e-ac5b-4a3e-b521-2976432e100f', path: '', url: 'http://10.0.0.120:8080/')], contextPath: 'myapp', war: '**/*.war'
          } catch(Exception e3) {
            emailext body: 'Jenkins was unable to deploy the code to tomcat QA', to: 'ankinimbommichaely@gmail.com', subject: 'Deploy to QA failed'
            error("Deployment to QA failed")
          }
        }
      }
    }
    stage('ContinuesTestingArtifact') {
      steps {
        script{
          try {
            sh 'mvn test'
          } catch(Exception e4) {
            emailext body: 'Jenkins was unable to run the tests', to: 'ankinimbommichaely@gmail.com', subject: 'Code Testing failed'
            error("Testing failed")
          }
        }
      }
    }
    stage('ContinuesDeployToTomcatServer') {
     steps {
      script{
        try {
        // Wait for approval
        input message: 'Approve deployment?', ok: 'Approve', submitter: 'mike'
        
        // If approved, continue with deployment
        deploy adapters: [tomcat9(credentialsId: 'e49623cc-8130-408e-a881-17d029847267', path: '', url: 'http://10.0.0.76:8080/')], contextPath: 'myapp', war: '**/*.war'
      } catch(Exception e5) {
        emailext body: 'Jenkins was unable to deploy the build artifact to PROD', to: 'ankinimbommichaely@gmail.com', subject: 'Code Deploy to Prod failed'
        error("Deployment to PROD failed")
      }
    }
  }
}
    stage('Check Monitoring Services') {
      steps {
        script{
          try {
            sh '''
            echo "Checking Prometheus..."
            curl -f http://10.0.0.76:9090/-/healthy
            echo "Checking Grafana..."
            curl -f http://10.0.0.76:3000/api/health
            '''
          } catch(Exception e) {
            emailext body: 'Monitoring services are not available', to: 'ankinimbommichaely@gmail.com', subject: 'Monitoring services check failed'
            error("Monitoring services check failed")
          }
        }
      }
    }
  }
}





pipeline {
    agent any
    stages {
        stage('GitCheckOut') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/mankinimbom/webapp.git'
                    } catch (Exception e1) {
                        mail bcc: '', body: 'Jenkins was unable to download the code from the GitHub repository: ' + e1.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git SCM Checkout Failed', to: 'ankinimbommichaely@gmail.com'
                        error("Git clone failed: " + e1.getMessage())
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'mvn package'
                    } catch (Exception e2) {
                        mail bcc: '', body: 'Maven was unable to build the project: ' + e2.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Maven Build Failed', to: 'ankinimbommichaely@gmail.com'
                        error("Maven build failed: " + e2.getMessage())
                    }
                }
            }
        }
        stage('SonarCodeReview') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('sonarqube') {
                            sh 'mvn sonar:sonar'
                        }
                    } catch (Exception e3) {
                        mail bcc: '', body: 'SonarQube analysis failed: ' + e3.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'SonarQube Analysis Failed', to: 'ankinimbommichaely@gmail.com'
                        error("Sonar analysis failed: " + e3.getMessage())
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } catch (Exception e4) {
                        mail bcc: '', body: 'Maven was unable to run tests: ' + e4.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Maven Test Failed', to: 'ankinimbommichaely@gmail.com'
                        error("Testing failed: " + e4.getMessage())
                    }
                }
            }
        }
        stage('nexusArtifactUpload') {
            steps {
                script {
                    try {
                        nexusArtifactUploader(
                            artifacts: [
                                [
                                    artifactId: 'webapp', 
                                    classifier: '', 
                                    file: '/var/jenkins_home/workspace/project/target/paradigm.war', 
                                    type: 'war'
                                ]
                            ], 
                            credentialsId: 'nexus', 
                            groupId: 'webapp', 
                            nexusUrl: 'nexuserver.atparadigmlabs.com', 
                            nexusVersion: 'nexus3', 
                            protocol: 'https', 
                            repository: 'maven-snapshots', 
                            version: '1.0-SNAPSHOT'
                        )
                    } catch (Exception e5) {
                        mail bcc: '', body: 'Artifact upload failed: ' + e5.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Artifact Upload Failed', to: 'ankinimbommichaely@gmail.com'
                        error("Artifact upload failed: " + e5.getMessage())
                    }
                }
            }
        }
    }
}





pipeline {
    agent any
    stages {
        stage('ContinuousCheckout') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/mankinimbom/webapp.git'
                    } catch(Exception e1) {
                        mail bcc: '', body: 'Error during Git checkout: ' + e1.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Git Checkout Failure', to: 'ankinimbommichaely@gmail.com'
                        error("Git checkout failed: " + e1.getMessage())
                    }
                }
            }
        }
        stage('ContinuousBuild') {
            steps {
                script {
                    try {
                        sh 'mvn package'
                    } catch(Exception e2) {
                        mail bcc: '', body: 'Build failure: ' + e2.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Build Failure', to: 'ankinimbommichaely@gmail.com'
                        error("Build failed: " + e2.getMessage())
                    }
                }
            }
        }
        stage('ContinuousScan') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('sonarqube') {
                            sh 'mvn sonar:sonar'
                        }
                    } catch(Exception e3) {
                        mail bcc: '', body: 'SonarQube analysis failure: ' + e3.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'SonarQube Analysis Failure', to: 'ankinimbommichaely@gmail.com'
                        error("SonarQube analysis failed: " + e3.getMessage())
                    }
                }
            }
        }
        stage('ContinuousTesting') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } catch(Exception e4) {
                        mail bcc: '', body: 'Testing failure: ' + e4.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Testing Failure', to: 'ankinimbommichaely@gmail.com'
                        error("Testing failed: " + e4.getMessage())
                    }
                }
            }
        }
        stage('ContinuousUpload') {
            steps {
                script {
                    try {
                        nexusArtifactUploader(
                            artifacts: [
                                [
                                    artifactId: 'webapp', 
                                    classifier: '', 
                                    file: '//var/jenkins_home/workspace/project/target/paradigm.war', 
                                    type: 'war'
                                ]
                            ],
                            credentialsId: 'nexus',
                            groupId: 'webapp',
                            nexusUrl: 'nexuserver.atparadigmlabs.com',
                            nexusVersion: 'nexus3',
                            protocol: 'https',
                            repository: 'maven-snapshots',
                            version: '1.0-SNAPSHOT'
                        )
                    } catch(Exception e5) {
                        mail bcc: '', body: 'Artifact upload failure: ' + e5.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Artifact Upload Failure', to: 'ankinimbommichaely@gmail.com'
                        error("Artifact upload failed: " + e5.getMessage())
                    }
                }
            }
        }
        stage('ContinuousDeployQA') {
            steps{
                script{
                    try{
                        deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'https://tomee.atparadigmlabs.com/')], contextPath: 'testapp', war: '**/*.war'
                    } catch(Exception e6) {
                        mail bcc: '', body: 'Deployment to QA failed: ' + e6.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'QA Deployment Failure', to: 'ankinimbommichaely@gmail.com'                        
                        error("Deployment to QA failed: " + e6.getMessage())
                    }
                }
            }
        }
        stage('ContinuousDeliveryProd') {
            steps{
                script{
                    try{
                        deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'https://tomee.atparadigmlabs.com/')], contextPath: 'testapp', war: '**/*.war'
                    } catch(Exception e7) {
                        mail bcc: '', body: 'Deployment to Production failed: ' + e7.getMessage(), cc: 'ankinimbommichaely@gmail.com', from: '', replyTo: '', subject: 'Production Deployment Failure', to: 'ankinimbommichaely@gmail.com'                        
                        error("Deployment to Production failed: " + e7.getMessage())
                    }
                }
            }
        }
        stage('Check Monitoring Services') {
            steps {
                script{
                    try {
                        sh '''
                        echo "Checking Prometheus..."
                        curl -f https://prom.atparadigmlabs.com/-/healthy
                        echo "Checking Grafana..."
                        curl -f https://grafan.atparadigmlabs.com/api/health
                        '''
                    } catch(Exception e8) {
                        mail bcc: '', body: 'Monitoring services check failed: ' + e8.getMessage(), to: 'ankinimbommichaely@gmail.com', subject: 'Monitoring Services Failure', from: '', replyTo: '', cc: 'ankinimbommichaely@gmail.com'
                        error("Monitoring services check failed: " + e8.getMessage())
                    }
                }
            }
        }
    }
}
